import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../../app/store"
import { fetchSample } from "../api/sampleApi"

export interface SampleState {
  value: number
  status: "idle" | "loading" | "failed"
}

const initialState: SampleState = {
  value: 0,
  status: "idle",
}

export const incrementAsync = createAsyncThunk(
  "sample/fetchSample",
  async (amount: number) => {
    const response = await fetchSample(amount)
    // The value we return becomes the `fulfilled` action payload
    return response.data
  }
)

export const sampleSlice = createSlice({
  name: "sample",
  initialState,
  reducers: {
    sample: (state) => {
      state.value += 1 // sample
    },
    sampleWithPayload: (state, action: PayloadAction<number>) => {
      state.value += 1 // sample
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle"
        state.value += action.payload
      })
  },
})

export const sampleReducer = sampleSlice.reducer
export const sampleActions = sampleSlice.actions
